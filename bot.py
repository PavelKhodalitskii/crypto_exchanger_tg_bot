import json
import telebot
from telebot import types
import random

from user import User
from database import DataAccessObject
from modules.news_scratch import get_news

token = ''

with open("../secret.txt", 'r') as file:
    token = file.readline().strip()
bot = telebot.TeleBot(token)
    
@bot.message_handler(commands=['start', 'Help', 'help'])
def start(message):
    markup = types.ReplyKeyboardMarkup(True, row_width=2)
    helper = types.KeyboardButton('–ú–µ–Ω–µ–¥–∂–µ—Ä')
    wallet = types.KeyboardButton('–ö–æ—à–µ–ª—ë–∫')
    exchanger = types.KeyboardButton('–û–±–º–µ–Ω–Ω–∏–∫')
    news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏')
    about_service = types.KeyboardButton('–û —Å–µ—Ä–≤–∏—Å–µ')
    
    markup.add(helper, wallet, exchanger, about_service, news)
    bot.send_message(message.chat.id, 'üöÄ–î–æ–±—Ä–æ –ø–æ–∂–ª–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ –æ–±–º–µ–Ω–Ω–∏–∫!', reply_markup=markup)

    user_id = message.from_user.id
    user = User(str(user_id))

@bot.message_handler(content_types=['text'])
def command(message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        user = User(str(user_id))

        if message.text == '–ù–æ–≤–æ—Å—Ç–∏':
            news_data = get_news()
            bot.send_message(message.chat.id, f"{news_data['news_date']} | {news_data['news_name']} | {news_data['news_text']} | {news_data['url']}",
                parse_mode='html')
        elif message.text == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            managers = ['https://t.me/AlexLand0']
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ú–µ–Ω–µ–¥–∂–µ—Ä', url=random.choice(managers)))
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=markup)
        elif message.text == '–ö–æ—à–µ–ª—ë–∫':

            markup = types.InlineKeyboardMarkup(row_width=2)
            fill_up_button = types.InlineKeyboardButton("‚¨Ü –ü–æ–ø–æ–ª–Ω–∏—Ç—å ", callback_data='–ü–æ–ø–æ–ª–Ω–∏—Ç—å')
            withdraw_button = types.InlineKeyboardButton("‚¨á –°–Ω—è—Ç—å ", callback_data='–°–Ω—è—Ç—å')
            markup.add(fill_up_button, withdraw_button)

            balance_data = user.get_balance_data()
            bot_message_balance = (
                f"üíµ –ë–∞–ª–∞–Ω—Å BTC: {balance_data['BTC']}\nüíµ –ë–∞–ª–∞–Ω—Å ETH: {balance_data['ETH']}")
            bot.send_message(message.chat.id, bot_message_balance, reply_markup=markup)
        elif message.text == '–û —Å–µ—Ä–≤–∏—Å–µ':
            bot.send_message(message.chat.id, '–û –Ω–∞—Å: ')
        elif message.text == '–û–±–º–µ–Ω–Ω–∏–∫':
            markup = types.InlineKeyboardMarkup(row_width=2)
            btc_to_eth = types.InlineKeyboardButton("BTC->ETH", callback_data='BTC-ETH')
            eth_to_btc = types.InlineKeyboardButton("ETH->BTC", callback_data='ETH-BTC')
            markup.add(btc_to_eth, eth_to_btc)
            bot.send_message(message.chat.id, '–ü–µ—Ä–µ–≤–æ–¥', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å':
                markup = types.InlineKeyboardMarkup(row_width=2)
                btc_fillup = types.InlineKeyboardButton("BTC ", callback_data='BTC_fill_up')
                eth_fillup = types.InlineKeyboardButton("ETH ", callback_data='ETH_fill_up')
                markup.add(btc_fillup, eth_fillup)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫, –í–∞–º –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—à–∏ —Å—Ç—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –Ω–∏–∂–µ\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 1 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –í–∞—Å –≤ –∫–æ—à–µ–ª—å–∫–µ.",
                                    reply_markup=markup)
            elif call.data == '–°–Ω—è—Ç—å':
                markup = types.InlineKeyboardMarkup(row_width=2)
                btc_withdraw = types.InlineKeyboardButton("BTC ", callback_data='BTC_withdraw')
                eth_withdraw = types.InlineKeyboardButton("ETH ", callback_data='ETH_withdraw')
                markup.add(btc_withdraw, eth_withdraw)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏, –í–∞–º –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥. \n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 1 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –í–∞—Å –≤ –∫–æ—à–µ–ª—å–∫–µ.",
                                    reply_markup=markup)
            elif call.data == 'BTC_fill_up':
                bot.send_message(chat_id=call.message.chat.id, text=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é BTC:\n (–ù–µ –º–µ–Ω–µ–µ 0,00000547 BTC)\n BTC –ö–æ—à–µ–ª–µ–∫: {User(call.message.chat.id).get_btc_wallet_number()}")
            elif call.data == 'ETH_fill_up':
                bot.send_message(chat_id=call.message.chat.id, text=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ETH:\n (–ù–µ –º–µ–Ω–µ–µ 0,00000547 ETH)\n ETH –ö–æ—à–µ–ª–µ–∫: {User(call.message.chat.id).get_eth_wallet_number()}")
            elif call.data == 'BTC_withdraw':
                withdraw_to_btc_address = call.message.text
            elif call.data == 'ETH_withdraw':
                withdraw_to_eth_address = call.message.text
            elif call.data == 'BTC-ETH':
                bot.send_message(chat_id=call.message.chat.id, text=f"–ü–µ—Ä–µ–æ–¥ –∏–∑ BTC –≤ ETH. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ")
            elif call.data == 'ETH-BTC':
                bot.send_message(chat_id=call.message.chat.id, text=f"–ü–µ—Ä–µ–æ–¥ –∏–∑ ETH –≤ BTC. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ")
    except Exception as e:
        print(repr(e))

database = DataAccessObject()
bot.polling(none_stop=True)


# while True:
#     try:
#         bot.polling(none_stop=True)
#     except Exception as e:
#         print(e)
#         traceback.print_exc()
#         time.sleep(15)